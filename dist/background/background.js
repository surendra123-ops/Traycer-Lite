(()=>{"use strict";var e={63:(e,t,a)=>{a.d(t,{generateRuleBasedPlan:()=>s});const n=[{keywords:["chat","messaging","message","conversation"],plan:{Frontend:["Chat Interface","User Login","Message Input","User List"],Backend:["Authentication API","Message API","WebSocket Service","User Management"],Database:["Users","Messages","Chat Rooms","User Sessions"]}},{keywords:["dashboard","analytics","metrics","chart"],plan:{Frontend:["Dashboard Layout","Charts & Graphs","Filters","Data Tables"],Backend:["Data Aggregation API","Analytics Service","Export API"],Database:["Metrics","User Data","Analytics Events"]}},{keywords:["ecommerce","shop","store","cart","payment"],plan:{Frontend:["Product Catalog","Shopping Cart","Checkout Flow","User Account"],Backend:["Product API","Payment Gateway","Order Management","Inventory API"],Database:["Products","Orders","Users","Payments","Inventory"]}},{keywords:["social","network","friends","profile","feed"],plan:{Frontend:["User Profiles","Social Feed","Friend Connections","Messaging"],Backend:["User API","Feed API","Social Graph Service","Notification Service"],Database:["Users","Posts","Friendships","Notifications"]}},{keywords:["game","gaming","player","score","leaderboard"],plan:{Frontend:["Game Interface","Player Dashboard","Leaderboard","Game Controls"],Backend:["Game Logic API","Score API","Multiplayer Service"],Database:["Players","Games","Scores","Achievements"]}},{keywords:["ai","machine learning","ml","prediction","model"],plan:{Frontend:["AI Interface","Data Input Forms","Results Display","Model Configuration"],Backend:["AI Service API","Model Training API","Prediction API","Data Processing"],Database:["Training Data","Models","Predictions","User Inputs"]}}],r={Frontend:["Basic UI/Homepage","Navigation","User Interface Components"],Backend:["Core Logic API","Authentication","Data Processing"],Database:["Generic Data Storage","User Data","Application Data"]};function s(e){const t=e.toLowerCase();for(const e of n)if(e.keywords.some(e=>t.includes(e)))return e.plan;return r}}},t={};function a(n){var r=t[n];if(void 0!==r)return r.exports;var s=t[n]={exports:{}};return e[n](s,s.exports,a),s.exports}a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var n=a(63);chrome.runtime.onMessage.addListener((e,t,r)=>{if(e.idea&&e.mode)return async function(e){const t=Date.now();let r;return r="rule"===e.mode?(0,n.generateRuleBasedPlan)(e.idea):await async function(e){try{const t={contents:[{parts:[{text:`You are a senior software architect with 20+ years of experience.\nBreak the user request into Frontend, Backend, and Database components.\nUse bullet points under each section for clarity.\nAdd a short, plain-English explanation in a "Notes" section for non-technical users.\nKeep the plan concise, clear, and easy to understand.\nFormat your response exactly like this:\n\n--- Frontend ---\n- [task 1]\n- [task 2]\n\n--- Backend ---\n- [task 1]\n- [task 2]\n\n--- Database ---\n- [table/entity 1]\n- [table/entity 2]\n\n--- Notes ---\n[Plain English explanation of what this system does and how the components work together]\n\nUser request: "${e}"`}]}]},a=await fetch("https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=YOUR_API_KEY_HERE",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!a.ok)throw new Error(`API request failed: ${a.status}`);const n=await a.json();if(!n.candidates||0===n.candidates.length)throw new Error("No response from AI");return function(e){const t=e.split("\n"),a={Frontend:[],Backend:[],Database:[],Notes:""};let n="";for(const e of t){const t=e.trim();if(t.startsWith("--- Frontend ---"))n="frontend";else if(t.startsWith("--- Backend ---"))n="backend";else if(t.startsWith("--- Database ---"))n="database";else if(t.startsWith("--- Notes ---"))n="notes";else if(t.startsWith("- ")&&"notes"!==n){const e=t.substring(2).trim();"frontend"===n?a.Frontend.push(e):"backend"===n?a.Backend.push(e):"database"===n&&a.Database.push(e)}else"notes"===n&&t&&!t.startsWith("---")&&(a.Notes=(a.Notes+" "+t).trim())}return a}(n.candidates[0].content.parts[0].text)}catch(t){console.error("AI planning error:",t);const{generateRuleBasedPlan:n}=await Promise.resolve().then(a.bind(a,63));return n(e)}}(e.idea),{plan:r,mode:e.mode,timestamp:t}}(e).then(e=>{r(e)}).catch(t=>{console.error("Plan generation error:",t),r({plan:{Frontend:["Error occurred"],Backend:["Please try again"],Database:["Check your connection"]},mode:e.mode,timestamp:Date.now()})}),!0})})();