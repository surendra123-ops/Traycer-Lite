(()=>{"use strict";var e={63:(e,a,n)=>{n.d(a,{generateRuleBasedPlan:()=>o});const r=[{keywords:["chat","messaging","message","conversation"],plan:{Frontend:["Chat Interface","User Login","Message Input","User List"],Backend:["Authentication API","Message API","WebSocket Service","User Management"],Database:["Users","Messages","Chat Rooms","User Sessions"]}},{keywords:["dashboard","analytics","metrics","chart"],plan:{Frontend:["Dashboard Layout","Charts & Graphs","Filters","Data Tables"],Backend:["Data Aggregation API","Analytics Service","Export API"],Database:["Metrics","User Data","Analytics Events"]}},{keywords:["ecommerce","shop","store","cart","payment"],plan:{Frontend:["Product Catalog","Shopping Cart","Checkout Flow","User Account"],Backend:["Product API","Payment Gateway","Order Management","Inventory API"],Database:["Products","Orders","Users","Payments","Inventory"]}},{keywords:["social","network","friends","profile","feed"],plan:{Frontend:["User Profiles","Social Feed","Friend Connections","Messaging"],Backend:["User API","Feed API","Social Graph Service","Notification Service"],Database:["Users","Posts","Friendships","Notifications"]}},{keywords:["game","gaming","player","score","leaderboard"],plan:{Frontend:["Game Interface","Player Dashboard","Leaderboard","Game Controls"],Backend:["Game Logic API","Score API","Multiplayer Service"],Database:["Players","Games","Scores","Achievements"]}},{keywords:["ai","machine learning","ml","prediction","model"],plan:{Frontend:["AI Interface","Data Input Forms","Results Display","Model Configuration"],Backend:["AI Service API","Model Training API","Prediction API","Data Processing"],Database:["Training Data","Models","Predictions","User Inputs"]}}],t={Frontend:["Basic UI/Homepage","Navigation","User Interface Components"],Backend:["Core Logic API","Authentication","Data Processing"],Database:["Generic Data Storage","User Data","Application Data"]};function o(e){const a=e.toLowerCase();for(const e of r)if(e.keywords.some(e=>a.includes(e)))return e.plan;return t}}},a={};function n(r){var t=a[r];if(void 0!==t)return t.exports;var o=a[r]={exports:{}};return e[r](o,o.exports,n),o.exports}n.d=(e,a)=>{for(var r in a)n.o(a,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:a[r]})},n.o=(e,a)=>Object.prototype.hasOwnProperty.call(e,a);var r=n(63);chrome.runtime.onMessage.addListener((e,a,t)=>{if(e.idea&&e.mode)return async function(e){const a=Date.now();let t;return t="rule"===e.mode?(0,r.generateRuleBasedPlan)(e.idea):await async function(e){try{{console.log("Gemini API key not set, falling back to rule-based planning");const{generateRuleBasedPlan:a}=await Promise.resolve().then(n.bind(n,63));return a(e)}}catch(a){console.error("AI planning error:",a);const{generateRuleBasedPlan:r}=await Promise.resolve().then(n.bind(n,63));return r(e)}}(e.idea),{plan:t,mode:e.mode,timestamp:a}}(e).then(e=>{t(e)}).catch(a=>{console.error("Plan generation error:",a),t({plan:{Frontend:["Error occurred"],Backend:["Please try again"],Database:["Check your connection"]},mode:e.mode,timestamp:Date.now()})}),!0})})();